import asyncio
import logging
from settings import BOT_TOKEN as Token

from aiogram import Bot
from aiogram import Dispatcher
from aiogram import types
from aiogram import F

from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery


dp = Dispatcher()
link1 = f"https://obuchonok.ru/node/1160"
text1 = "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
link2 = f"https://obuchonok.ru/node/1175"
text2 = "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"
link3 = f"https://obuchonok.ru/node/1124"
text3 = "–§–∏–∑–∏–∫–∞"
link4 = f"https://obuchonok.ru/node/444"
text4 = "–ë–∏–æ–ª–æ–≥–∏—è"
link5 = f"https://obuchonok.ru/node/1174"
text5 = "–ü—Å–∏—Ö–∏–ª–æ–≥–∏—è"
link6 = f"https://obuchonok.ru/node/431"
text6 = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
link7 = f"https://obuchonok.ru/node/1118"
text7 = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"
link8 = f"https://obuchonok.ru/node/1122"
text8 = "–•–∏–º–∏—è"
link9 = f"https://obuchonok.ru/node/440"
text9 = "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"

@dp.message(CommandStart())
async def handle_start(message: types.Message):
    await message.answer(text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –∂–¥–∏—Ç–µ...")
    await message.answer(text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}, —á–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?\n'
                            f'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –≤–≤–µ–¥–∏—Ç–µ /help')


@dp.message(Command("help"))
async def handle_help(message: types.Message):
    await message.answer(text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –∂–¥–∏—Ç–µ...")
    await message.answer(text='–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                            '/presentation - –ó–¥–µ—Å—å —è –ø–æ–¥—Å–∫–∞–∂—É –í–∞–º, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø—Ä–æ–µ–∫—Ç—É\n'
                            '/themes - –ó–¥–µ—Å—å —è –ø—Ä–µ–¥–ª–æ–∂—É –í–∞–º –Ω–∞ –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —è —Å—á–∏—Ç–∞—é —Å–∞–º—ã–º–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏\n'
                            '/documentation - –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —è —Å–∫–∞–∂—É –í–∞–º, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–ª—è—Ç—å –¥–æ–∫–ª–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É')


@dp.message(Command("presentation"))
async def handle_presentation(message: types.Message):
    await message.answer(text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –∂–¥–∏—Ç–µ...")
    await message.answer(text = '–ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:\n'
                                '- –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–ª–∞–π–¥–æ–≤.\n'
                                '- –¢–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:\n'
                                '   ‚Ä¢ –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏;\n'
                                '   ‚Ä¢ —Å–≤–µ–¥–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ –ø—Ä–æ–µ–∫—Ç–∞;\n'
                                '   ‚Ä¢ –≥–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞\n'
                                '- –¢–µ–∫—Å—Ç —Å–ª–∞–π–¥–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —á–∏—Ç–∞–µ–º—ã–º, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—É—é –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.\n'
                                '- –°–ª–∞–π–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ.\n'
                                '- –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏, –≥—Ä–∞—Ñ–∏–∫–∏, —Å—Ö–µ–º—ã, —Ç–∞–±–ª–∏—Ü—ã, —Å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.')


@dp.message(Command("themes"))
async def handle_themes(message: types.Message):
    await message.answer(text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –∂–¥–∏—Ç–µ...")
    await message.answer(text = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ, –ø–æ –º–æ–µ–º—É –º–Ω–µ–Ω–∏–∏—é, —è–≤–ª—è—é—Ç—Å—è —Å–∞–º—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:(–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∞–π—Ç —Å —Ç–µ–º–∞–º–∏)\n"
                                f"‚Ä¢ <a href=\"{link1}\">{text1}</a>\n"
                                f"‚Ä¢ <a href=\"{link2}\">{text2}</a>\n"
                                f"‚Ä¢ <a href=\"{link3}\">{text3}</a>\n"
                                f"‚Ä¢ <a href=\"{link4}\">{text4}</a>\n"
                                f"‚Ä¢ <a href=\"{link5}\">{text5}</a>\n"
                                f"‚Ä¢ <a href=\"{link6}\">{text6}</a>\n"
                                f"‚Ä¢ <a href=\"{link7}\">{text7}</a>\n"
                                f"‚Ä¢ <a href=\"{link8}\">{text8}</a>\n"
                                f"‚Ä¢ <a href=\"{link9}\">{text9}</a>\n"
                                f"–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–≤–µ–¥–∏—Ç–µ /info", parse_mode="html")


@dp.message(Command("documentation"))
async def handle_documentation(message: types.Message):
    await message.answer(text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –∂–¥–∏—Ç–µ...")
    await message.answer(text="–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫–ª–∞–¥–∞ —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:\n"
                            "‚Ä¢ –¢–µ–∫—Å—Ç –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –ª–∏—Å—Ç–∞ –±–µ–ª–æ–π –±—É–º–∞–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∞ A4\n"
                            "‚Ä¢ –ú–µ–∂–¥—É—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω 1 –∏–ª–∏ 1.15\n"
                            "‚Ä¢ –®—Ä–∏—Ñ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏—è Times New Roman –∏ –≤—ã—Ä–æ–≤–Ω–µ–Ω –ø–æ —à–∏—Ä–∏–Ω–µ\n"
                            "‚Ä¢ –ö–∞–≤—ã—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–∞ ¬´–∫–∞–≤—ã—á–∫–∏-–µ–ª–æ—á–∫–∏¬ª\n"
                            "‚Ä¢ –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü:\n"
                            "             -–∞—Ä–∞–±—Å–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏\n"
                            "             -—Å–∫–≤–æ–∑–Ω–∞—è, –æ—Ç —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞, –ø—Ä–∏ —ç—Ç–æ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —Ç–∏—Ç—É–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ –Ω–µ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—é—Ç\n"
                            "             -–ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n"
                            "             -–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞–≤–∏—Ç—Å—è –≤–Ω–∏–∑—É –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏")


@dp.message(Command("info", prefix="!/"))
async def buttons(message: types.Message):
    button1 = InlineKeyboardButton(text = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã",
                                url="https://obuchonok.ru/klass/proekt/10",)
    button2 = InlineKeyboardButton(text = "–°–∞–π—Ç —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã",
                                url="https://workproekt.ru/temy-proektov/kak-vyibrat-temu-proektnoy-rabotyi/",)
    button3 = InlineKeyboardButton(text = "–Ø —Ç–∞–∫ –∏ –Ω–µ —Å–º–æ–≥ –≤—ã–±—Ä–∞—Ç—åüò•", callback_data="unluck")
    row1 = [button1]
    row2 = [button2]
    row3 = [button3]
    rows = [row1,
            row2,
            row3,]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await message.answer(
        text = "–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
        reply_markup = markup,
    )


@dp.callback_query(F.data == "unluck")
async def call(callback: CallbackQuery):
    await callback.message.answer("–ï—Å–ª–∏ —É–∂ –≤—Å–µ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –¥—Ä—É–≥–∏—Ö —Ä–µ–±—è—Ç, –∫–∞–∫ –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥–∏–ª–∏ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ç–µ–º—ã, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–Ω–∏ –í–∞–º –ø–æ–¥—Å–∫–∞–∂—É—Ç")
    await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫–æ –º–Ω–µ! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ \"–ü–æ–º–æ–≥–∏ –º–Ω–µ!\"")


@dp.message()
async def messaging(message: types.Message):
    btn1 = InlineKeyboardButton(text = "–Ø –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º", callback_data="theme")
    btn2 = InlineKeyboardButton(text = "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫–ª–∞–¥—É?", callback_data="doklad")
    btn3 = InlineKeyboardButton(text = "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏?", callback_data="preza")
    rw1 = [btn1]
    rw2 = [btn2]
    rw3 = [btn3]
    rws = [rw1,
        rw2,
        rw3]
    mrkp = InlineKeyboardMarkup(inline_keyboard=rws)
    if message.text.lower() == '–ø–æ–º–æ–≥–∏ –º–Ω–µ!':
        await message.answer(text="–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=mrkp)


@dp.callback_query(F.data == "theme")
async def theme(callback: CallbackQuery):
    bt2 = InlineKeyboardButton(text = "–î–∞, –¥–∞–≤–∞–π—Ç–µ", callback_data="yes")
    r2 = [bt2]
    rs = [r2]
    mrkup = InlineKeyboardMarkup(inline_keyboard=rs)
    await callback.message.answer("–ß—Ç–æ–∂, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç, –∏ –º—ã –ø–æ–π–º–µ–º –∫–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç", reply_markup=mrkup)


@dp.callback_query(F.data == "doklad")
async def document(callback: CallbackQuery):
    b1 = InlineKeyboardButton(text = "–Ø –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º", callback_data="theme")
    b3 = InlineKeyboardButton(text = "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏?", callback_data="preza")
    ro1 = [b1]
    ro3 = [b3]
    ros = [ro1,
        ro3]
    mrk = InlineKeyboardMarkup(inline_keyboard=ros)
    await callback.message.answer("–í–≤–µ–¥–∏–∏–µ –∫–æ–º–∞–Ω–¥—É /documentation, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É –í–∞–º –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–∫–ª–∞–¥", reply_markup=mrk)


@dp.callback_query(F.data == "preza")
async def preza(callback: CallbackQuery):
    btt1 = InlineKeyboardButton(text = "–Ø –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º", callback_data="theme")
    btt2 = InlineKeyboardButton(text = "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫–ª–∞–¥—É?", callback_data="doklad")
    rs1 = [btt1]
    rs2 = [btt2]
    rss = [rs1,
        rs2]
    mrp = InlineKeyboardMarkup(inline_keyboard=rss)  
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ /presentation, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É –í–∞–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –í–∞—à—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", reply_markup=mrp)


@dp.callback_query(F.data == "yes")
async def test(callback: CallbackQuery):
    btn11 = InlineKeyboardButton(text = "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ", callback_data="gum")
    btn12 = InlineKeyboardButton(text = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ", callback_data="tech")
    btn13 = InlineKeyboardButton(text = "–•–∏–º-–ë–∏–æ", callback_data = "bio")
    ryad1 = [btn11]
    ryad2 = [btn12]
    ryad3 = [btn13]
    ryadi = [ryad1,
            ryad2,
            ryad3]
    mrkp1 = InlineKeyboardMarkup(inline_keyboard=ryadi)
    await callback.message.answer(f"–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.\n"
                                "–ö–∞–∫–∞—è –æ–±–ª–∞—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ?", reply_markup=mrkp1)
    
@dp.callback_query(F.data == "gum")
async def gumanitariy(callback: CallbackQuery):
    button11 = InlineKeyboardButton(text = "–Ø–∑—ã–∫–æ–≤—ã–µ", callback_data="lang")
    button12 = InlineKeyboardButton(text = "–°–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ", callback_data="social")
    rd1 = [button11]
    rd2 = [button12]
    rds = [rd1, 
        rd2]
    mrkp2 = InlineKeyboardMarkup(inline_keyboard=rds)
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∞—è —Å—Ñ–µ—Ä–∞ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –í–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=mrkp2)


@dp.callback_query(F.data == "lang")
async def languages(callback: CallbackQuery):
    bttn1 = InlineKeyboardButton(text = "–†–æ–¥–Ω–æ–π", callback_data="rodnoy")
    bttn2 = InlineKeyboardButton(text = "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π", callback_data="foreign")
    ryd1 = [bttn1]
    ryd2 = [bttn2]
    rydi = [ryd1,
            ryd2]
    mrkp3 = InlineKeyboardMarkup(inline_keyboard=rydi)
    await callback.message.answer("–ê —Å–µ–π—á–∞—Å —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, –∫–∞–∫–æ–π —è–∑—ã–∫ –í–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?", reply_markup=mrkp3)


@dp.callback_query(F.data == "rodnoy")
async def rodnoy(callback: CallbackQuery):
    bn1 = InlineKeyboardButton(text = "–°–ø–∞—Å–∏–±–æ!!", callback_data="thanks")
    l1 = [bn1]
    t1 = [l1]
    mrkp_R = InlineKeyboardMarkup(inline_keyboard=t1)
    await callback.message.answer(f"–í–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –†—É—Å—Å–∫–∏–π —è–∑—ã–∫! –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: <a href=\"{link1}\">{text1}</a>", reply_markup=mrkp_R, parse_mode="html")

@dp.callback_query(F.data == "foreign")
async def foreign(callback: CallbackQuery):
    knopka1 = InlineKeyboardButton(text = "–°–ø–∞—Å–∏–±–æ!!", callback_data="thanks")
    l2 = [knopka1]    
    t2 = [l2]
    mrkp_F = InlineKeyboardMarkup(inline_keyboard=t2)
    await callback.message.answer(f"–í–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫! –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: <a href=\"{link7}\">{text7}</a>", reply_markup=mrkp_F, parse_mode="html")


@dp.callback_query(F.data == "social")
async def social(callback: CallbackQuery):
    knopka11 = InlineKeyboardButton(text="–ü—Å–∏—Ö–∏—á–µ—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞", callback_data="psycho")
    knopka12 = InlineKeyboardButton(text="–ñ–∏–∑–Ω—å –æ–±—â–µ—Å—Ç–≤–∞", callback_data="obsch")
    l31 = [knopka11]
    l32 = [knopka12]
    t3 = [l31, 
        l32]
    mrkpp = InlineKeyboardMarkup(inline_keyboard=t3)
    await callback.message.answer("–ß—Ç–æ –í–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–∑—É—á–∞—Ç—å?", reply_markup=mrkpp)


@dp.callback_query(F.data == "psycho")
async def psycho(callback: CallbackQuery):
    knopka111 = InlineKeyboardButton(text = "–°–ø–∞—Å–∏–±–æ!!", callback_data="thanks")
    l311 = [knopka111]
    t31 = [l311]
    mrkp_P = InlineKeyboardMarkup(inline_keyboard=t31)
    await callback.message.answer(f"–í–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è! –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: <a href=\"{link5}\">{text5}</a>", reply_markup=mrkp_P, parse_mode="html")


@dp.callback_query(F.data == "obsch")
async def obsch(callback: CallbackQuery):
    knopka112 = InlineKeyboardButton(text = "–°–ø–∞—Å–∏–±–æ!!", callback_data="thanks")
    l321 = [knopka112]
    t32 = [l321]
    mrkp_O = InlineKeyboardMarkup(inline_keyboard=t32)
    await callback.message.answer(f"–í–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ! –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: <a href=\"{link2}\">{text2}</a>", reply_markup=mrkp_O, parse_mode="html")


@dp.callback_query(F.data == "tech")
async def techo(callback: CallbackQuery):
    knopka21 = InlineKeyboardButton(text = "–õ–æ–≥–∏—á–µ—Å–∫–∏–µ, —Å —Ä–∞–±–æ—Ç–æ–π —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º", callback_data="logical")
    knopka22 = InlineKeyboardButton(text = "C —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏", callback_data="sum")
    l4_1 = [knopka21]
    l4_2 = [knopka22]
    t4 = [l4_1,
        l4_2]
    mrkp_4 = InlineKeyboardMarkup(inline_keyboard=t4)
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ —Å—Ñ–µ—Ä–æ–π", reply_markup=mrkp_4)


@dp.callback_query(F.data == "logical")
async def logical(callback: CallbackQuery):
    knopka211 = InlineKeyboardButton(text = "–°–ø–∞—Å–∏–±–æ!!", callback_data="thanks")
    l4_11 = [knopka211]
    t41 = [l4_11]
    mrkp_inf = InlineKeyboardMarkup(inline_keyboard=t41)
    await callback.message.answer(f"–í–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞! –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: <a href=\"{link9}\">{text9}</a>", reply_markup=mrkp_inf, parse_mode="html")


@dp.callback_query(F.data == "sum")
async def sum(callback: CallbackQuery):
    knopka221 = InlineKeyboardButton(text = "–° –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏", callback_data="math")
    knopka222 = InlineKeyboardButton(text = "–° —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏", callback_data="physics")
    l5_1 = [knopka221]
    l5_2 = [knopka222]
    t5 = [l5_1,
        l5_2]
    mrkp_sum = InlineKeyboardMarkup(inline_keyboard=t5)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –≤–∏–¥ —Ä–∞—Å—á—ë—Ç–æ–≤ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ", reply_markup=mrkp_sum)


@dp.callback_query(F.data == "math")
async def math(callback: CallbackQuery):
    knopka231 = InlineKeyboardButton(text = "–°–ø–∞—Å–∏–±–æ!!", callback_data="thanks")
    l5_11 = [knopka231]
    t5_1 = [l5_11]
    mrkp_M = InlineKeyboardMarkup(inline_keyboard=t5_1)
    await callback.message.answer(f"–í–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞! –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: <a href=\"{link6}\">{text6}</a>", reply_markup=mrkp_M, parse_mode="html")


@dp.callback_query(F.data == "physics")
async def physics(callback: CallbackQuery):
    knopka232 = InlineKeyboardButton(text = "–°–ø–∞—Å–∏–±–æ!!", callback_data="thanks")
    l5_12 = [knopka232]
    t5_2 = [l5_12]
    mrkp_Phys = InlineKeyboardMarkup(inline_keyboard=t5_2)
    await callback.message.answer(f"–í–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –§–∏–∑–∏–∫–∞! –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: <a href=\"{link3}\">{text3}</a>", reply_markup=mrkp_Phys, parse_mode="html")


@dp.callback_query(F.data == "bio")
async def bio(callback: CallbackQuery):
    knopka61 = InlineKeyboardButton(text = "–•–∏–º–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤", callback_data="chemistry")
    knopka62 = InlineKeyboardButton(text = "–ê—Å–ø–µ–∫—Ç—ã –∂–∏–∑–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤", callback_data="biology")
    l6_1 = [knopka61]
    l6_2 = [knopka62]
    t6_1 = [l6_1,
            l6_2]
    mrkp_CB = InlineKeyboardMarkup(inline_keyboard=t6_1)
    await callback.message.answer("–î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∏–∑—É—á–∞—Ç—å", reply_markup=mrkp_CB)


@dp.callback_query(F.data == "chemistry")
async def chemistry(callback: CallbackQuery):
    knopka611 = InlineKeyboardButton(text = "–°–ø–∞—Å–∏–±–æ!!", callback_data="thanks")
    l6_11 = [knopka611]
    t6_11 = [l6_11]
    mrkp_Chem = InlineKeyboardMarkup(inline_keyboard=t6_11)
    await callback.message.answer(f"–í–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –•–∏–º–∏—è! –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: <a href=\"{link8}\">{text8}</a>", reply_markup=mrkp_Chem, parse_mode="html")        


@dp.callback_query(F.data == "biology")
async def chemistry(callback: CallbackQuery):
    knopka612 = InlineKeyboardButton(text = "–°–ø–∞—Å–∏–±–æ!!", callback_data="thanks")
    l6_12 = [knopka612]
    t6_12 = [l6_12]
    mrkp_Chem = InlineKeyboardMarkup(inline_keyboard=t6_12)
    await callback.message.answer(f"–í–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –ë–∏–æ–ª–æ–≥–∏—è! –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: <a href=\"{link4}\">{text4}</a>", reply_markup=mrkp_Chem, parse_mode="html")


@dp.callback_query(F.data == "thanks")
async def thanks(callback: CallbackQuery):
    await callback.message.answer("–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –í–∞–º –ø–æ–º–æ—á—å!ü§ó")


async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=Token)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())